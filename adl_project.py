# -*- coding: utf-8 -*-
"""ADL_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EdXrl8Y_3Y2Gf4K4PBmrq37BKwzRt1mV
"""

# Commented out IPython magic to ensure Python compatibility.
#Required Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
from keras.preprocessing import image

"""Problem Statement:
Facial recognition is a biometric alternative that measures unique characteristics of a human
face. Applications available today include flight check in, tagging friends and family members in
photos, and “tailored” advertising. You are a computer vision engineer who needs to develop a
face recognition programme with deep convolutional neural networks.
Objective: Use a deep convolutional neural network to perform facial recognition using Keras.
Dataset Details:
ORL face database composed of 400 images of size 112 x 92. There are 40 people, 10 images
per person. The images were taken at different times, lighting and facial expressions. The faces
are in an upright position in frontal view, with a slight left-right rotation.
Link to the Dataset: https://www.dropbox.com/s/i7uzp5yxk7wruva/ORL_faces.npz?dl=0
Prerequisites:
Keras
Scikit Learn
Steps to be followed:
1. Input the required libraries
2. Load the dataset after loading the dataset, you have to normalize every image.
3. Split the dataset
4. Transform the images to equal sizes to feed in CNN
5. Build a CNN model that has 3 main layers:

i. Convolutional Layer
ii. Pooling Layer
iii. Fully Connected Layer

6. Train the model
7. Plot the result
8. Iterate the model until the accuracy is above 90%
"""

#Loading the data
data=np.load('/content/drive/MyDrive/ORL_faces.npz')

data

#Noticed that the dataset is already split
list(data)

with np.load('/content/drive/MyDrive/ORL_faces.npz') as data:
    trainX=(data['trainX'])
    trainY=(data['trainY'])
    testX=data['testX']
    testY=data['testY']

#Noramlizing each image of train and test data
train_X_Normalized=trainX/255
test_X_Normalized=testX/255

#converting the label class in to one-hot representation matrix
from keras.utils import to_categorical

test_Y=to_categorical(testY)
train_Y=to_categorical(trainY)
test_Y.shape, train_Y.shape

train_X_Normalized.shape[1:]
input_shape=train_X_Normalized.shape
print(input_shape)

print(test_X_Normalized.shape)
#Reshaping the test data for fitting it in CNN
test_X_Normalized = test_X_Normalized.reshape(160,112,92,1)
print(test_X_Normalized.shape)

print(train_X_Normalized.shape)
#Reshaping the train data for fitting it in CNN
train_X_Normalized=train_X_Normalized.reshape(240,112,92,1)
print(train_X_Normalized.shape)

test_Y

train_Y.shape

#Preparing a Convolution Neural Network
from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Dense
from keras.layers import Flatten
model=Sequential()

#Convolution Layer
model.add(Conv2D(16, (3, 3), padding='same', activation='relu', input_shape=(112,92,1)))

#Pooling layer
model.add(MaxPooling2D(pool_size=(2, 2)))

#Flatten the o/p of pooling layer
model.add(Flatten())

model.add(Dense(20, activation='softmax'))

model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])

non_augmented_Model=model.fit(train_X_Normalized, train_Y, batch_size=1, epochs=25, verbose=1, 
                   validation_data=(test_X_Normalized, test_Y))

accuracy_train = non_augmented_Model.history['accuracy']
accuracy_val = non_augmented_Model.history['val_accuracy']
len(accuracy_train), len(accuracy_val)
epochs = range(1,26)
plt.plot(epochs, accuracy_train, 'g', label='Training accuracy')
plt.plot(epochs, accuracy_val, 'b', label='validation accuracy')
plt.title('Training and Validation accuracy of Non augmented Model')
plt.xlabel('Epochs')
plt.ylabel('accuracy')
plt.legend()
plt.show()

#Image Data Generator For image augmentation
datagen = image.ImageDataGenerator(
    featurewise_center=True,
    featurewise_std_normalization=True,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    horizontal_flip=True)

augmented_Model=model.fit(datagen.flow(train_X_Normalized, train_Y, batch_size=32),
          steps_per_epoch=len(train_X_Normalized) / 32, epochs=25,validation_data=(test_X_Normalized, test_Y))

accuracy_train = augmented_Model.history['accuracy']
accuracy_val = augmented_Model.history['val_accuracy']
len(accuracy_train), len(accuracy_val)
epochs = range(1,26)
plt.plot(epochs, accuracy_train, 'g', label='Training accuracy')
plt.plot(epochs, accuracy_val, 'b', label='validation accuracy')
plt.title('Training and Validation accuracy of Augmented Model')
plt.xlabel('Epochs')
plt.ylabel('accuracy')
plt.legend()
plt.show()

augmented_Model.history["val_accuracy"].pop()